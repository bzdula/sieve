if size :over 100k { # this is a comment
                discard;
             }

if size :over 100K { /* this is a comment
                this is still a comment */ discard /* this is a comment
                */ ;
             }
require "encoded-character";
             if header :contains "Subject" "$${hex:24 24}" {
                discard;
             }

if anyof (not exists ["From", "Date"],
                   header :contains "from" "fool@example.com") {
                discard;
             }

set :is :contains :matches :comparator :localpart :domain :all;

if size :over 500K { discard; }

keep; fileinto; redirect; discard; stop;

require "fileinto";
             if header :contains "from" "coyote" {
                discard;
             } elsif header :contains ["subject"] ["$$$"] {
                discard;
             } else {
                fileinto "INBOX";
             }

if header :contains ["From"] ["coyote"] {
                redirect "acm@example.com";
             } elsif header :contains "Subject" "$$$" {
                redirect "postmaster@example.com";
             } else {
                redirect "field@example.com";
             }

require "fileinto";
             if header :contains ["from"] "coyote" {
                fileinto "INBOX.harassment";
             }

if not size :under 1M { discard; }

if allof anyof envelope exists true false header not size;

set "dollar" "$";
      set "text" "regarding ${dollar}{beep}";

      require ["encoded-character", "variables"];
      set "name" "Ethelbert"
      if header :contains "Subject" "dear${hex:20 24 7b 4e}ame}" {
          # the test string is "dear Ethelbert"
      }

require ["fileinto", "variables"];

      if header :matches "List-ID" "*<*@*" {
          fileinto "INBOX.lists.${2}"; stop;
      }

      # Imagine the header
      # Subject: [acme-users] [fwd] version 1.0 is out
      if header :matches "Subject" "[*] *" {
          # ${1} will hold "acme-users",
          # ${2} will hold "[fwd] version 1.0 is out"
          fileinto "INBOX.lists.${1}"; stop;
      }

      # Imagine the header
      # To: coyote@ACME.Example.COM
      if address :matches ["To", "Cc"] ["coyote@**.com",
              "wile@**.com"] {
          # ${0} is the matching address
          # ${1} is always the empty string
          # ${2} is part of the domain name ("ACME.Example")
          fileinto "INBOX.business.${2}"; stop;
      } else {
          # Control wouldn't reach this block if any match was
          # successful, so no match variables are set at this
          # point.
      }

      if anyof (true, address :domain :matches "To" "*.com") {
          # The second test is never evaluated, so there are
          # still no match variables set.
          stop;
      }

set "honorific"  "Mr";
set "first_name" "Wile";
set "last_name"  "Coyote";
set "vacation" text:
Dear ${HONORIFIC} ${last_name},
I'm out, please leave a message after the meep.
.
;



     set :lower :upper :lowerfirst :upperfirst :quotewildcard :length;

      set "state" "${state} pending";
      if string :matches " ${state} " "* pending *" {
          # the above test always succeeds
      }


body :raw :content :text 

convert 

:copy 

date currentdate :value :index :zone :originalzone :last

duplicate :handle :header :uniqueid :seconds :last

addheader :last 

deleteheader :index :last

foreverypart :name

break

header :mime :anychild :type :subtype :contenttype :param

address 

exists

replace :subject :from

enclose

extracttext :first

notify :from :importance :options :message

redirect :notify :ret :copy :bytimerelative :bytimeabsolute :bymode :bytrace :zone

environment

ereject

reject

redirect :list 
valid_ext_list 

:fcc :flags :create :specialuse

vacation :days :seconds :subject :from :addresses :mime :handle :from :importance :options :message

ihave
error

setflag addflag removeflag hasflag

include :once :optional :personal :global
return
global

mailboxexists :create 
metadata
metadataexists
servermetadata
servermetadataexists

:mailboxid
mailboxidexists

:regex :quoteregex

:count :value 

spamtest :percent
virustest

specialuse_exists :specialuse

:user :detail 


vacation  :days :subject :from :addresses :mime  :handle

:seconds :addresses 


